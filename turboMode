#!/bin/sh
## This script will strip down a std DBB Toolkit install 
## to reduce the JVM class load times and use other JVM options. 
## The focus is zDT eprformance boost but can help with nonzDT, non-Daemon mode runs 
##   
###


## 
### BKUP 
##
echo "Backup phase using default DBB_HOME=$DBB_HOME"
 "$DBB_HOME/groovy-2.4.12/ "
 
 
 ##
 ### Clean
 ##
 
 ##
 ### Test 
 ##
 
 # JVM options  - quickStart, sharedclass, trace  

# shutdown a all prior jvmOpts - I have sharedClass in my .profile 
 # timer
 
 # sample build run 
 
 # report 
 
 
 # setup Daemon mode
 
 
 
 
 ### REF NOTES 

##*** JVM ClassLoader  Notes:  - ref https://docs.oracle.com/javase/1.5.0/docs/api/java/lang/ClassLoader.html
###    Bootstrap Class Loading: The ?Bootstrap Class Loader? loads Java code and essential Java classes such as java.lang.Object into memory. These loaded classes reside in JRE\lib\rt.jar.
###    Extension Class Loading: The ExtClassLoader is responsible for loading all JAR files located at the java.ext.dirs path. In non-Maven or non-Gradle based applications, where a developer adds JARs manually, all those classes are loaded during this phase.
###    Application Class Loading: The AppClassLoader loads all classes located in the application class path.


##*** Notes from th TurboPDF  - ref https://zeeohhsss.wordpress.com/2020/04/23/turbo-java-in-adcd/
### -Xms256m
### -Xmx512m
### -Xquickstart
### -Xshareclasses:nonFatal -Xshareclasses:groupAccess
### -Xshareclasses:cacheDirPerm=0777
### -Xscmx50m (I used 150M for z/OSMF and 30M for z/OS Explorer)
### -Xshareclasses:cacheDir=/javasc/zcn,name=zcncache
### -Xlp:objectheap:pagesize=1m,warn,pageable
### -Xlp:codecache:pagesize=1m,pageable

### -Xscmx option and use of the printStats cache utility to see how it?s doing.

##***  Side notes  
### need to define min require setting for a zDT config - where is that?
